// Code generated by MockGen. DO NOT EDIT.
// Source: articles.go

// Package mocks is a generated GoMock package.
package mocks

import (
	context "context"
	reflect "reflect"

	model "github.com/dewzzjr/ais/internal/model"
	gomock "github.com/golang/mock/gomock"
)

// MockArticle is a mock of Article interface.
type MockArticle struct {
	ctrl     *gomock.Controller
	recorder *MockArticleMockRecorder
}

// MockArticleMockRecorder is the mock recorder for MockArticle.
type MockArticleMockRecorder struct {
	mock *MockArticle
}

// NewMockArticle creates a new mock instance.
func NewMockArticle(ctrl *gomock.Controller) *MockArticle {
	mock := &MockArticle{ctrl: ctrl}
	mock.recorder = &MockArticleMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockArticle) EXPECT() *MockArticleMockRecorder {
	return m.recorder
}

// FetchArticles mocks base method.
func (m *MockArticle) FetchArticles(arg0 context.Context) ([]model.Article, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FetchArticles", arg0)
	ret0, _ := ret[0].([]model.Article)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FetchArticles indicates an expected call of FetchArticles.
func (mr *MockArticleMockRecorder) FetchArticles(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FetchArticles", reflect.TypeOf((*MockArticle)(nil).FetchArticles), arg0)
}

// InsertArticle mocks base method.
func (m *MockArticle) InsertArticle(arg0 context.Context, arg1 model.Article) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "InsertArticle", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// InsertArticle indicates an expected call of InsertArticle.
func (mr *MockArticleMockRecorder) InsertArticle(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "InsertArticle", reflect.TypeOf((*MockArticle)(nil).InsertArticle), arg0, arg1)
}
